{"version":3,"sources":["../../../../server/middlewares/validation/library/validationLibrary.js"],"names":["Validate","field","input","min","max","regEx","example","required","message","error","length","test","regEx1","regEx2","regEx3","regEx4"],"mappings":"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","sourcesContent":["class Validate {\r\n  static validateTextField(field, input, min = 2, max = 10, regEx, example, required = true) {\r\n    let message = '';\r\n\r\n    /* istanbul ignore if */if (!input) {\r\n      message = { error: `${field} must be included`, field };\r\n    } else if (input.length < min || input.length > max) {\r\n      message = { error: `${field} length should be between ${min} and ${max} character(s)`, field };\r\n    } else if (regEx.test(input) === false) {\r\n      message = { error: `wrong ${field} format. example ${field}s: ${example}`, field };\r\n    } else {\r\n      message = true;\r\n    }\r\n\r\n    if (!input && required === false) message = true;\r\n\r\n    return message;\r\n  }\r\n\r\n  static validatePasswordField(field, input, min, max, example, required = true) {\r\n    let message = '';\r\n\r\n    const regEx1 = /[a-z]+/g;\r\n    const regEx2 = /[A-Z]+/g;\r\n    const regEx3 = /[0-9]+/g;\r\n    const regEx4 = /[@#$]+/g;\r\n\r\n    /* istanbul ignore if */if (!input) {\r\n      message = { error: `${field} must be included`, field };\r\n    } else if (input.length < min || input.length > max) {\r\n      message = { error: `${field} length should be between ${min} and ${max} character(s)`, field };\r\n    } else if (regEx1.test(input) === false) {\r\n      message = { error: `wrong ${field} format. one lowercase character must be included. example ${field}s: ${example}`, field };\r\n    } else if (regEx2.test(input) === false) {\r\n      message = { error: `wrong ${field} format. one uppercase character must be included. example ${field}s: ${example}`, field };\r\n    } else if (regEx3.test(input) === false) {\r\n      message = { error: `wrong ${field} format. one numeric character must be included. example ${field}s: ${example}`, field };\r\n    } else if (regEx4.test(input) === false) {\r\n      message = { error: `wrong ${field} format. one of (@#$) characters must be included. example ${field}s: ${example}`, field };\r\n    } else {\r\n      message = true;\r\n    }\r\n\r\n    if (!input && required === false) message = true;\r\n\r\n    return message;\r\n  }\r\n}\r\n\r\nexport default Validate;\r\n"],"file":"validationLibrary.js"}