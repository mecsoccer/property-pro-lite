{"version":3,"sources":["../../server/models/users.js"],"names":["UserOperations","userDetail","Promise","resolve","token","email","first_name","last_name","password","phoneNumber","address","is_admin","id","UserStore","length","hash","bcrypt","hashSync","newUser","error","forEach","user","statusCode","status","push","data","filter","item","compareSync"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\r\nimport bcrypt from 'bcryptjs';\r\nimport UserStore from '../db/userStore';\r\n\r\nclass UserOperations {\r\n  static createUser(userDetail) {\r\n    return new Promise((resolve) => {\r\n      const {\r\n        token, email, first_name, last_name, password, phoneNumber, address, is_admin,\r\n      } = userDetail;\r\n      const id = `${UserStore.length + 1}`;\r\n      const hash = bcrypt.hashSync(password, 10);\r\n      const newUser = {\r\n        token, id, email, first_name, last_name, password: hash, phoneNumber, address, is_admin,\r\n      };\r\n      let error;\r\n\r\n      UserStore.forEach((user) => {\r\n        if (user.email === email) {\r\n          error = 'user already exists';\r\n          resolve({ statusCode: 409, error, status: 'error' });\r\n        }\r\n      });\r\n\r\n      if (error) return;\r\n      UserStore.push(newUser);\r\n      const data = { token, id, first_name, last_name, email, is_admin };\r\n      resolve({ statusCode: 201, data, status: 'success' });\r\n    });\r\n  }\r\n\r\n  static loginUser(email, password) {\r\n    return new Promise((resolve) => {\r\n      const user = UserStore.filter(item => item.email === email)[0];\r\n\r\n      if (!user || !bcrypt.compareSync(password, user.password)) {\r\n        resolve({ statusCode: 401, error: 'incorrect email or password', status: 'error' });\r\n      }\r\n\r\n      resolve({ statusCode: 200, data: user, status: 'success' });\r\n    });\r\n  }\r\n\r\n  static getUserById(id) {\r\n    return new Promise((resolve) => {\r\n      UserStore.forEach((user) => {\r\n        if (user.id === id) {\r\n          resolve({ statusCode: 200, data: user, status: 'success' });\r\n        }\r\n      });\r\n\r\n      resolve({ statusCode: 404, error: 'user does not exist', status: 'error' });\r\n    });\r\n  }\r\n}\r\n\r\nexport default UserOperations;\r\n"],"file":"users.js"}